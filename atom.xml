<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oozie&#39;s Blog</title>
  <subtitle>好记性，不如小博客</subtitle>
  <link href="https://GISering.github.io/atom.xml" rel="self"/>
  
  <link href="https://GISering.github.io/"/>
  <updated>2016-11-03T09:21:16.000Z</updated>
  <id>https://GISering.github.io/</id>
  
  <author>
    <name>Oozie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用ajax刷新地图POI坐标</title>
    <link href="https://GISering.github.io/2016/10/28/%E4%BD%BF%E7%94%A8ajax%E5%88%B7%E6%96%B0%E5%9C%B0%E5%9B%BEPOI%E5%9D%90%E6%A0%87/"/>
    <id>https://GISering.github.io/2016/10/28/使用ajax刷新地图POI坐标/</id>
    <published>2016-10-28T03:11:31.000Z</published>
    <updated>2016-11-03T09:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做的项目，我负责的模块涉及到移动设备的位置和轨迹的监控，需要将设备的实时位置信息展现在地图上，注意是<strong>实时</strong>的。完整业务流程是，移动设备每隔一段时间（10s左右）将自己位置信息（经纬度）坐标上传至数据库中，Web浏览器网页不断获取最新的坐标，并将设备在Web地图上的位置刷新到该坐标，达到设备位置监控的目的。</p>
<a id="more"></a>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>初学前端开发两个月，弯弯绕绕的东西实在太多，不会的就更多了。读书的时候从老司机那知道要达到这种网页局部刷新的目的得使用Ajax，然而我对于Ajax技术的了解真的只停留在了解的阶段，它具体是干什么用的、用在哪、怎么用我是一概不知，有种“不明觉厉”的感觉。不过没关系，咱们自学能力强，接受新东西快（装*完毕，跑~🙈）。于是查询了一下资料在，在<a href="https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started" target="_blank" rel="external">MDN</a> 中是这么解释的：</p>
<blockquote>
<p>AJAX stands for Asynchronous JavaScript and XML. In a nutshell, it is the use of the XMLHttpRequest object to communicate with server-side scripts. It can send as well as receive information in a variety of formats, including JSON, XML, HTML, and even text files. AJAX’s most appealing characteristic, however, is its “asynchronous” nature, which means it can do all of this without having to refresh the page. This lets you update portions of a page based upon user events.</p>
</blockquote>
<p>总的来说Ajax有两个特点：</p>
<ul>
<li>向服务器提交请求时不用重新加载页面</li>
<li>获取和处理来自服务器返回的数据  </li>
</ul>
<p>果然，这两个特点不就是我想要的么？网页地图不断向服务器发送请求而不用刷新页面，获取移动设备的最新的位置信息，并将该位置更新在网页地图上显示。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>Ajax是利用<code>XMLHttpRequest</code>对象在客户端和服务端传递信息的，它在<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">MDN</a>中是这样定义的：</p>
<blockquote>
<p>XMLHttpRequest is an API that provides client functionality for transferring data between a client and a server. It provides an easy way to retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just a part of the page without disrupting what the user is doing.  XMLHttpRequest is used heavily in AJAX programming.</p>
</blockquote>
<p>这让我不禁想到一个和它长得很像的<code>HttpRequest</code>,它们两有什么区别呢？</p>
<ol>
<li><code>XMLHttpRequest</code>是一个标准的<strong>JavaScript</strong>对象，用于在浏览器中通过js向服务器发送<strong><em>Request</em></strong>请求；</li>
<li><code>HttpRequest</code>是一个服务器端的对象，代表一个向服务器的<strong><em>Request</em></strong>请求；</li>
<li>总的来说，它们一个工作在<strong>浏览器</strong>中，一个工作在<strong>Web服务器</strong>中，扮演着不同的角色；</li>
</ol>
<p>知道了<code>XMLHttpRequest</code>对象，该如何使用呢？下面是一段完整的使用代码段：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	  <span class="keyword">var</span> httpRequest;</div><div class="line">	  <span class="built_in">document</span>.getElementById(<span class="string">"ajaxButton"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; makeRequest(<span class="string">'test.html'</span>); &#125;;</div><div class="line">	</div><div class="line">	  <span class="function"><span class="keyword">function</span> <span class="title">makeRequest</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">	    httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">	</div><div class="line">	    <span class="keyword">if</span> (!httpRequest) &#123;</div><div class="line">	      alert(<span class="string">'Giving up :( Cannot create an XMLHTTP instance'</span>);</div><div class="line">	      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	    &#125;</div><div class="line">	    httpRequest.onreadystatechange = alertContents;</div><div class="line">	    httpRequest.open(<span class="string">'GET'</span>, url);</div><div class="line">	    httpRequest.send();</div><div class="line">	  &#125;</div><div class="line">	</div><div class="line">	  <span class="function"><span class="keyword">function</span> <span class="title">alertContents</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	    <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class="line">	      <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</div><div class="line">	        alert(httpRequest.responseText);</div><div class="line">	      &#125; <span class="keyword">else</span> &#123;</div><div class="line">	        alert(<span class="string">'There was a problem with the request.'</span>);</div><div class="line">	      &#125;</div><div class="line">	    &#125;</div><div class="line">	  &#125;</div><div class="line">	&#125;)();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ol>
<li><p>首先构建<code>XMLHttpRequest</code>对象  </p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure>
</li>
<li><p>声明服务器返回数据后的处理函数  </p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	httpRequest.onreadystatechange = alertContents;<span class="comment">//函数名</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p> ===<br> 或者   </p>
</li>
</ol>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>

===
在回调函数里，首先要判断***Request***的状态：   

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class="line"><span class="comment">// everything is good, the response is received</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	    <span class="comment">// still not ready</span></div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>

===
如果***Request***的状态是完成，再判断***Response code***：  

<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	if (httpRequest.status === 200) &#123;</div><div class="line">    // perfect!</div><div class="line">	&#125; else &#123;</div><div class="line">    // there was a problem with the request,</div><div class="line">    // for example the response may contain a 404 (NotFound)</div><div class="line">    // or 500 (Internal Server Error) response code</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">```     </div><div class="line">===             </div><div class="line">如果返回码是**200**，就可以获得服务器返回的数据，并进行处理，获取返回数据的方法：   </div><div class="line"></div><div class="line">```JavaScript</div><div class="line">&lt;script&gt;</div><div class="line">	httpRequest.responseText;//以字符串的方式获取服务器的Response</div><div class="line">	httpRequest.responseXML;//以XMLDocument对象的方式获取服务器的Response</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>


如果是同步请求，脚本会停止运行，等待`send()`函数的返回，所以就不需要提前定义回调函数，可以直接在`send()`方法返回后，获取服务器的返回数据，进行进一步操作。
</code></pre><ol>
<li><p>提交<strong><em>Request</em></strong>请求</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	httpRequest.open(&apos;GET&apos;, url, true);</div><div class="line"> 	httpRequest.send();</div><div class="line">	&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>open()</code>函数用于初始化请求<ul>
<li>第一个参数是<strong><em>HTTP</em></strong>的<strong><em>Request</em></strong>方法——<em>GET, POST, HEAD</em>；</li>
<li>第二个参数是处理<strong><em>HTTP</em></strong>请求的<strong>url</strong>地址；</li>
<li>第三个是可选参数，用于设定是否以异步的方式发送请求，默认是<code>true</code>,即以异步方式。</li>
</ul>
</li>
<li><code>send()</code>函数用于发送请求，如果是异步请求，那么该方法在请求发送时就会返回；如果是同步请求，那么该方法直到<strong><em>Response</em></strong>返回时才会返回。<code>send()</code>函数有一个可选参数，用于设置Reauest body，如果请求方法是<em>GET</em>或<em>HEAD</em>，该参数将被忽略并且Reauest body将被置为空。</li>
</ul>
</li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>通过上面的介绍，可以发现如果直接用<code>XMLHttpRequest</code>实现Ajax，是比较麻烦的，好在有强大的<strong>jQuery</strong>，它将<code>XMLHttpRequest</code>进一步封装，使用起来更加便捷：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">	<span class="attr">type</span>: <span class="comment">//请求的方法‘get’或‘post’</span></div><div class="line">	url:	<span class="comment">//请求的url地址</span></div><div class="line">	data: <span class="comment">//请求时带的数据</span></div><div class="line">	<span class="keyword">async</span>:	<span class="comment">//是否异步请求，默认为true</span></div><div class="line">	success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">		<span class="comment">//请求成功后的回调函数，data为返回数据</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>详细说明可以参考<a href="http://api.jquery.com/jQuery.ajax/" target="_blank" rel="external">jQuery官方文档</a>。<br>为了达到实时刷新位置信息的目的，我是这样解决的：  </p>
<ol>
<li>首先给实时从移动端上传的每条位置信息记录添加一个时间戳；</li>
<li>后端通过设备ID和时间戳从数据库中查询出最新的记录，得到位置信息；</li>
<li>编写对应的Control层，给前端访问；</li>
<li>前端设置定时器，并在定时器类调用$.ajax()方法，定时调用以获取最新的位置信息。</li>
</ol>
<p>我的开发环境是<strong>J2EE SSM</strong>:</p>
<ul>
<li>后端SQL语句如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select coord_x, coord_y from table </div><div class="line">where deviceId = #&#123;deviceId&#125; and 2&gt;rownum</div><div class="line">order by createtime desc</div></pre></td></tr></table></figure>
<ul>
<li>前端js代码如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function refreshPos()&#123;     var BASE_PATH = &apos;&lt;%=basePath%&gt;&apos;;     var deviceId = &apos;&lt;%=deviceId%&gt;&apos;;     var url = BASE_PATH + &quot;control/mdpos/getMobileDeviceCurrentPos.action?deviceId=&quot; + deviceId + &quot;&amp;etc=&quot; + new Date().getTime();//请求地址     $.ajax(&#123;       type: &quot;get&quot;,       url: url,       async: true,       success: function(data)&#123;   	  	  var x = parseFloat(data.sPos.coord_X);   	  	  var y = parseFloat(data.sPos.coord_Y);		  var currentPos = ol.proj.transform([x, y], &apos;EPSG:4326&apos;, &apos;EPSG:3857&apos;);   			point_overlay.setPosition(currentPos);//Openlayers的api	    &#125;	 &#125;);   &#125; </div><div class="line"></div><div class="line">setInterval(&quot;refreshPos()&quot;, 5000);//设置定时器</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/006y8mN6gw1f9f1h7cdc0g30tz0eek17.gif" alt=""></p>
<p>位置是模拟的，所以移动的很快，像瞬移似的哈哈~~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做的项目，我负责的模块涉及到移动设备的位置和轨迹的监控，需要将设备的实时位置信息展现在地图上，注意是&lt;strong&gt;实时&lt;/strong&gt;的。完整业务流程是，移动设备每隔一段时间（10s左右）将自己位置信息（经纬度）坐标上传至数据库中，Web浏览器网页不断获取最新的坐标，并将设备在Web地图上的位置刷新到该坐标，达到设备位置监控的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Front" scheme="https://GISering.github.io/categories/Front/"/>
    
    
      <category term="WebGIS" scheme="https://GISering.github.io/tags/WebGIS/"/>
    
      <category term="jQuery" scheme="https://GISering.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Openlayer3基本地图功能实现(2)</title>
    <link href="https://GISering.github.io/2016/10/24/Openlayer3%E5%9F%BA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B02/"/>
    <id>https://GISering.github.io/2016/10/24/Openlayer3基本地图功能实现2/</id>
    <published>2016-10-24T14:45:08.000Z</published>
    <updated>2016-10-28T03:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在1中介绍了一下Openlayers中常用的类的功能，下面从功能实现的角度，用代码说明如何将这些类组合在一起封装成可以直接使用的地图操作方法</p>
<h1 id="地图功能"><a href="#地图功能" class="headerlink" title="地图功能"></a>地图功能</h1><p>我们将这些地图常用功能简单封装了一下（不知羞耻的将该类称之为<code>Mapx</code>），方便在按钮的<code>onclick</code>事件中调用，主要有测量、轨迹回放、绘图、添加位置标记功能。功能的实现参考了Openlayers官网的<a href="http://openlayers.org/en/latest/examples/index.html" target="_blank" rel="external">Example</a>，并在此基础修改完善，使其更加符合实际使用场景。比如，测量功能，官方示例中无法退出测量功能，并且测量时所标绘的图形也无法移除。</p>
<a id="more"></a>
<p>首先给出<code>MapX</code>类的方法结构：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*centerArray:地图中心点数组如[117.2214, 32.8253]</div><div class="line">*zoom:地图初始化状态下的缩放级别</div><div class="line">*url:离线地图所在的本地地址</div><div class="line">*/</div><div class="line">MapX = <span class="function"><span class="keyword">function</span>(<span class="params">centerArray,zoom,url</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> map = <span class="literal">null</span>;<span class="comment">//定义全局地图对象</span></div><div class="line">	<span class="keyword">var</span> labelLayer = <span class="literal">null</span>;</div><div class="line">	<span class="keyword">var</span> labelSource = <span class="literal">null</span>;</div><div class="line">	<span class="keyword">var</span> mapListner = <span class="literal">null</span>;</div><div class="line">	<span class="keyword">var</span> draw = <span class="literal">null</span>; </div><div class="line">	<span class="keyword">var</span> routeLayer;</div><div class="line">	<span class="keyword">var</span> vector; </div><div class="line">	<span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="comment">//初始化地图内容</span></div><div class="line">		<span class="keyword">var</span> center = ol.proj.transform([centerArray[<span class="number">0</span>],centerArray[<span class="number">1</span>]], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>);			</div><div class="line">	 	map = <span class="keyword">new</span> ol.Map(&#123;<span class="comment">//初始化地图对象</span></div><div class="line">			view: <span class="keyword">new</span> ol.View(&#123; </div><div class="line">				<span class="attr">center</span>: center,</div><div class="line">				<span class="attr">zoom</span>: zoom</div><div class="line">			&#125;),</div><div class="line">			<span class="attr">target</span>:<span class="string">'map'</span></div><div class="line">		&#125;);		</div><div class="line">	 	</div><div class="line">		<span class="keyword">var</span> offlineMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="comment">//初始化地图需要的离线地图图层</span></div><div class="line">			source: <span class="keyword">new</span> ol.source.XYZ(&#123;</div><div class="line">				<span class="attr">url</span>: url</div><div class="line">			&#125;)</div><div class="line">		&#125;);		</div><div class="line">		map.addLayer(offlineMapLayer); <span class="comment">//将离线地图图层添加至地图对象中</span></div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>startMessure(type)</td>
<td>启动测量功能</td>
</tr>
<tr>
<td>endMessure()</td>
<td>结束测量</td>
</tr>
<tr>
<td>drawTrackLine(routeString)</td>
<td>显示轨迹</td>
</tr>
<tr>
<td>removeTrackLine()</td>
<td>移除轨迹</td>
</tr>
<tr>
<td>addLabel()</td>
<td>添加位置标记</td>
</tr>
<tr>
<td>draw(type)</td>
<td>启动绘图功能</td>
</tr>
</tbody>
</table>
<h2 id="测量"><a href="#测量" class="headerlink" title="测量"></a>测量</h2><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f93guaw67hg30yj0hqe81.gif" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/*测量类型 'Polygon'或'LineString'*/</span></div><div class="line">    MapX.prototype.startMessure = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    	ol.Observable.unByKey(mapListner);<span class="comment">//每次启动测量时，解除可能存在的地图监听事件   	</span></div><div class="line">        <span class="keyword">var</span> sketch;</div><div class="line">        <span class="keyword">var</span> source = <span class="keyword">new</span> ol.source.Vector();</div><div class="line">        <span class="keyword">var</span> wgs84Sphere = <span class="keyword">new</span> ol.Sphere(<span class="number">6378137</span>);</div><div class="line">        vector = <span class="keyword">new</span> ol.layer.Vector(&#123; <span class="comment">//每次测量双击结束后由黄色实现形成的图形就是由vector保存的</span></div><div class="line">            source: source,</div><div class="line">            <span class="attr">style</span>: <span class="keyword">new</span> ol.style.Style(&#123;</div><div class="line">                <span class="attr">fill</span>: <span class="keyword">new</span> ol.style.Fill(&#123;</div><div class="line">                    <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.2)'</span></div><div class="line">                &#125;),</div><div class="line">                <span class="attr">stroke</span>: <span class="keyword">new</span> ol.style.Stroke(&#123;</div><div class="line">                    <span class="attr">color</span>: <span class="string">'#ffcc33'</span>,</div><div class="line">                    <span class="attr">width</span>: <span class="number">2</span></div><div class="line">                &#125;),</div><div class="line">                <span class="attr">image</span>: <span class="keyword">new</span> ol.style.Circle(&#123;</div><div class="line">                    <span class="attr">radius</span>: <span class="number">7</span>,</div><div class="line">                    <span class="attr">fill</span>: <span class="keyword">new</span> ol.style.Fill(&#123;</div><div class="line">                        <span class="attr">color</span>: <span class="string">'#ffcc33'</span></div><div class="line">                    &#125;)</div><div class="line">                &#125;)</div><div class="line">            &#125;)</div><div class="line">        &#125;);</div><div class="line">        map.addLayer(vector);</div><div class="line"></div><div class="line">		<span class="comment">//鼠标移动事件</span></div><div class="line">        <span class="keyword">var</span> pointerMoveHandler = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (evt.dragging) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">			</div><div class="line">		<span class="comment">//绑定鼠标移动事件</span></div><div class="line">        mapListner = map.on(<span class="string">'pointermove'</span>, pointerMoveHandler);</div><div class="line"></div><div class="line">		<span class="comment">//获取所绘图形长度</span></div><div class="line">        <span class="keyword">var</span> formatLength = <span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> length;</div><div class="line">            <span class="keyword">if</span> (<span class="literal">true</span>) &#123;<span class="comment">//默认使用经纬度即地理坐标计算</span></div><div class="line">                <span class="keyword">var</span> coordinates = line.getCoordinates();</div><div class="line">                length = <span class="number">0</span>;</div><div class="line">                <span class="keyword">var</span> sourceProj = map.getView()</div><div class="line">                    .getProjection();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, ii = coordinates.length - <span class="number">1</span>; i &lt; ii; ++i) &#123;</div><div class="line">                    <span class="keyword">var</span> c1 = ol.proj.transform(coordinates[i], sourceProj, <span class="string">'EPSG:4326'</span>);</div><div class="line">                    <span class="keyword">var</span> c2 = ol.proj.transform(coordinates[i + <span class="number">1</span>], sourceProj, <span class="string">'EPSG:4326'</span>);</div><div class="line">                    length += wgs84Sphere.haversineDistance(c1, c2);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;<span class="comment">//否则使用投影坐标</span></div><div class="line">                length = <span class="built_in">Math</span>.round(line.getLength() * <span class="number">100</span>) / <span class="number">100</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> output;</div><div class="line">            <span class="keyword">if</span> (length &gt; <span class="number">100</span>) &#123;</div><div class="line">                output = (<span class="built_in">Math</span>.round(length / <span class="number">1000</span> * <span class="number">100</span>) / <span class="number">100</span>) +</div><div class="line">                    <span class="string">' '</span> + <span class="string">'千米'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                output = (<span class="built_in">Math</span>.round(length * <span class="number">100</span>) / <span class="number">100</span>) +</div><div class="line">                    <span class="string">' '</span> + <span class="string">'米'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> output;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">		<span class="comment">//获取所绘图形面积</span></div><div class="line">        <span class="keyword">var</span> formatArea = <span class="function"><span class="keyword">function</span>(<span class="params">polygon</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> area;</div><div class="line">            <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">                <span class="keyword">var</span> sourceProj = map.getView()</div><div class="line">                    .getProjection();</div><div class="line">                <span class="keyword">var</span> geom = <span class="comment">/** @type &#123;ol.geom.Polygon&#125; */</span> (polygon.clone()</div><div class="line">                    .transform(</div><div class="line">                        sourceProj, <span class="string">'EPSG:4326'</span>));</div><div class="line">                <span class="keyword">var</span> coordinates = geom.getLinearRing(<span class="number">0</span>)</div><div class="line">                    .getCoordinates();</div><div class="line">                area = <span class="built_in">Math</span>.abs(wgs84Sphere.geodesicArea(coordinates));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                area = polygon.getArea();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> output;</div><div class="line">            <span class="keyword">if</span> (area &gt; <span class="number">10000</span>) &#123;</div><div class="line">                output = (<span class="built_in">Math</span>.round(area / <span class="number">1000000</span> * <span class="number">100</span>) / <span class="number">100</span>) +</div><div class="line">                    <span class="string">' '</span> + <span class="string">'平方千米'</span><span class="comment">/*'km&lt;sup&gt;2&lt;/sup&gt;'*/</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                output = (<span class="built_in">Math</span>.round(area * <span class="number">100</span>) / <span class="number">100</span>) +</div><div class="line">                    <span class="string">' '</span> + <span class="string">'平方米'</span><span class="comment">/*'m&lt;sup&gt;2&lt;/sup&gt;'*/</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> output;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line"><span class="comment">//添加交互图层，即测量过程中绘制图形所在的图层，就是那条黑色虚线</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addInteraction</span>(<span class="params"></span>) </span>&#123;            </div><div class="line">	   		draw = <span class="keyword">new</span> ol.interaction.Draw(&#123;</div><div class="line">	                <span class="attr">source</span>: source,</div><div class="line">	                <span class="attr">type</span>: (type),</div><div class="line">	                <span class="attr">style</span>: <span class="keyword">new</span> ol.style.Style(&#123;</div><div class="line">	                    <span class="attr">fill</span>: <span class="keyword">new</span> ol.style.Fill(&#123;</div><div class="line">	                        <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.2)'</span></div><div class="line">	                    &#125;),</div><div class="line">	                    <span class="attr">stroke</span>: <span class="keyword">new</span> ol.style.Stroke(&#123;</div><div class="line">	                        <span class="attr">color</span>: <span class="string">'rgba(0, 0, 0, 0.5)'</span>,</div><div class="line">	                        <span class="attr">lineDash</span>: [<span class="number">10</span>, <span class="number">10</span>],</div><div class="line">	                        <span class="attr">width</span>: <span class="number">2</span></div><div class="line">	                    &#125;),</div><div class="line">	                    <span class="attr">image</span>: <span class="keyword">new</span> ol.style.Circle(&#123;</div><div class="line">	                        <span class="attr">radius</span>: <span class="number">5</span>,</div><div class="line">	                        <span class="attr">stroke</span>: <span class="keyword">new</span> ol.style.Stroke(&#123;</div><div class="line">	                            <span class="attr">color</span>: <span class="string">'rgba(0, 0, 0, 0.7)'</span></div><div class="line">	                        &#125;),</div><div class="line">	                        <span class="attr">fill</span>: <span class="keyword">new</span> ol.style.Fill(&#123;</div><div class="line">	                            <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.2)'</span></div><div class="line">	                        &#125;)</div><div class="line">	                    &#125;)</div><div class="line">	                &#125;)</div><div class="line">          	&#125;);</div><div class="line">            map.addInteraction(draw);</div><div class="line">            <span class="keyword">var</span> listener;</div><div class="line">            <span class="keyword">var</span> output;</div><div class="line">            </div><div class="line">            <span class="comment">//添加开始绘制和结束绘制的响应事件</span></div><div class="line">            mapListner = draw.on(<span class="string">'drawstart'</span>,</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">                    <span class="comment">// set sketch</span></div><div class="line">                    sketch = evt.feature;</div><div class="line">                    listener = sketch.getGeometry()</div><div class="line">                        .on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">                            <span class="keyword">var</span> geom = evt.target;</div><div class="line">                            <span class="keyword">if</span> (geom <span class="keyword">instanceof</span> ol.geom.Polygon) &#123;</div><div class="line">                                output = formatArea(geom);</div><div class="line">                                </div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> (geom <span class="keyword">instanceof</span> ol.geom.LineString) &#123;</div><div class="line">                                output = formatLength(geom);</div><div class="line">                            &#125;</div><div class="line">                 	&#125;);</div><div class="line">                &#125;, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">            draw.on(<span class="string">'drawend'</span>,</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> msg = (type == <span class="string">'Polygon'</span> ? <span class="string">"当前面积为："</span> : <span class="string">"当前长度为："</span>);</div><div class="line">                    alert(msg + output);</div><div class="line">                    sketch = <span class="literal">null</span>;</div><div class="line">                    ol.Observable.unByKey(listener);</div><div class="line"></div><div class="line">                &#125;, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        addInteraction();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="轨迹回放"><a href="#轨迹回放" class="headerlink" title="轨迹回放"></a>轨迹回放</h2><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f93guw12dkg30yj0hqjyu.gif" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">MapX.prototype.drawTrackLine = <span class="function"><span class="keyword">function</span>(<span class="params">routeString</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> projPointList = [];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;routeString.length; i++)&#123;</div><div class="line">            projPointList.push(ol.proj.transform([routeString[i][<span class="number">0</span>], routeString[i][<span class="number">1</span>]], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> animating = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">var</span> speed, now;</div><div class="line">        <span class="keyword">var</span> route = <span class="keyword">new</span> ol.Feature(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'route'</span>,</div><div class="line">            <span class="attr">geometry</span>: <span class="keyword">new</span> ol.geom.LineString(projPointList)</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> geoMarker = <span class="keyword">new</span> ol.Feature(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'geoMarker'</span>,</div><div class="line">            <span class="attr">geometry</span>: <span class="keyword">new</span> ol.geom.Point(projPointList[<span class="number">0</span>])</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> startMarker = <span class="keyword">new</span> ol.Feature(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'icon'</span>,</div><div class="line">            <span class="attr">geometry</span>: <span class="keyword">new</span> ol.geom.Point(projPointList[<span class="number">0</span>])</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> endMarker = <span class="keyword">new</span> ol.Feature(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'icon'</span>,</div><div class="line">            <span class="attr">geometry</span>: <span class="keyword">new</span> ol.geom.Point(projPointList[projPointList.length - <span class="number">1</span>])</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> styles = &#123;</div><div class="line">            <span class="string">'route'</span>: <span class="keyword">new</span> ol.style.Style(&#123;</div><div class="line">                <span class="attr">stroke</span>: <span class="keyword">new</span> ol.style.Stroke(&#123;</div><div class="line">                    <span class="attr">width</span>: <span class="number">6</span>,</div><div class="line">                    <span class="attr">color</span>: [<span class="number">237</span>, <span class="number">212</span>, <span class="number">0</span>, <span class="number">0.8</span>]</div><div class="line">                &#125;)</div><div class="line">            &#125;),</div><div class="line">            <span class="string">'icon'</span>: <span class="keyword">new</span> ol.style.Style(&#123;</div><div class="line">                <span class="attr">image</span>: <span class="keyword">new</span> ol.style.Icon(&#123;</div><div class="line">                    <span class="attr">anchor</span>: [<span class="number">0.5</span>, <span class="number">1</span>],</div><div class="line">                    <span class="attr">src</span>: <span class="string">'https://openlayers.org/en/v3.18.2/examples/data/icon.png'</span></div><div class="line">                &#125;)</div><div class="line">            &#125;),</div><div class="line">            <span class="string">'geoMarker'</span>: <span class="keyword">new</span> ol.style.Style(&#123;</div><div class="line">                <span class="attr">image</span>: <span class="keyword">new</span> ol.style.Circle(&#123;</div><div class="line">                    <span class="attr">radius</span>: <span class="number">7</span>,</div><div class="line">                    <span class="attr">snapToPixel</span>: <span class="literal">false</span>,</div><div class="line">                    <span class="attr">fill</span>: <span class="keyword">new</span> ol.style.Fill(&#123;</div><div class="line">                        <span class="attr">color</span>: <span class="string">'black'</span></div><div class="line">                    &#125;),</div><div class="line">                    <span class="attr">stroke</span>: <span class="keyword">new</span> ol.style.Stroke(&#123;</div><div class="line">                        <span class="attr">color</span>: <span class="string">'white'</span>,</div><div class="line">                        <span class="attr">width</span>: <span class="number">2</span></div><div class="line">                    &#125;)</div><div class="line">                &#125;)</div><div class="line">            &#125;)</div><div class="line">        &#125;;</div><div class="line"></div><div class="line"></div><div class="line">        routeLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</div><div class="line">            <span class="attr">source</span>: <span class="keyword">new</span> ol.source.Vector(&#123;</div><div class="line">                <span class="attr">features</span>: [route, geoMarker, startMarker, endMarker]</div><div class="line">            &#125;),</div><div class="line">            <span class="attr">style</span>: <span class="function"><span class="keyword">function</span>(<span class="params">feature</span>) </span>&#123;</div><div class="line">                <span class="comment">// hide geoMarker if animation is active</span></div><div class="line">                <span class="keyword">if</span> (animating &amp;&amp; feature.get(<span class="string">'type'</span>) === <span class="string">'geoMarker'</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> styles[feature.get(<span class="string">'type'</span>)];</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        map.addLayer(routeLayer);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> moveFeature = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> vectorContext = event.vectorContext;</div><div class="line">            <span class="keyword">var</span> frameState = event.frameState;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (animating) &#123;</div><div class="line">                <span class="keyword">var</span> elapsedTime = frameState.time - now;</div><div class="line">                <span class="comment">// here the trick to increase speed is to jump some indexes</span></div><div class="line">                <span class="comment">// on lineString coordinates</span></div><div class="line">                <span class="keyword">var</span> index = <span class="built_in">Math</span>.round(speed * elapsedTime / <span class="number">1000</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (index &gt;= projPointList.length) &#123;</div><div class="line">                    stopAnimation(<span class="literal">true</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> currentPoint = <span class="keyword">new</span> ol.geom.Point(projPointList[index]);</div><div class="line">                <span class="keyword">var</span> feature = <span class="keyword">new</span> ol.Feature(currentPoint);</div><div class="line">                vectorContext.drawFeature(feature, styles.geoMarker);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// tell OL3 to continue the postcompose animation</span></div><div class="line">            map.render();</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startAnimation</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (animating) &#123;</div><div class="line">                stopAnimation(<span class="literal">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                animating = <span class="literal">true</span>;</div><div class="line">                now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">                speed = <span class="number">3</span>;</div><div class="line">                <span class="comment">//startButton.textContent = 'Cancel Animation';</span></div><div class="line">                <span class="comment">// hide geoMarker</span></div><div class="line">                geoMarker.setStyle(<span class="literal">null</span>);</div><div class="line">                <span class="comment">// just in case you pan somewhere else</span></div><div class="line">                <span class="comment">/*map.getView()</span></div><div class="line">                    .setCenter(center);*/</div><div class="line">                map.on(<span class="string">'postcompose'</span>, moveFeature);</div><div class="line">                map.render();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="添加位置标记"><a href="#添加位置标记" class="headerlink" title="添加位置标记"></a>添加位置标记</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">MapX.prototype.addlabel = <span class="function"><span class="keyword">function</span>(<span class="params">src,text,offsetX,offsetY,centerArray</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> iconStyle = <span class="keyword">new</span> ol.style.Style(&#123;</div><div class="line">        <span class="attr">image</span>: <span class="keyword">new</span> ol.style.Icon((&#123;</div><div class="line">          <span class="attr">src</span>: src</div><div class="line">        &#125;)),</div><div class="line">        <span class="attr">text</span>:<span class="keyword">new</span> ol.style.Text((&#123;</div><div class="line">          <span class="attr">text</span>:text,</div><div class="line">          <span class="attr">offsetX</span>:offsetX,</div><div class="line">          <span class="attr">offsetY</span>:offsetY</div><div class="line">        &#125;))</div><div class="line">      &#125;);</div><div class="line">  	<span class="keyword">var</span> iconFeature = <span class="keyword">new</span> ol.Feature(&#123;</div><div class="line">	        <span class="attr">geometry</span>: <span class="keyword">new</span> ol.geom.Point(ol.proj.fromLonLat([centerArray[<span class="number">0</span>],centerArray[<span class="number">1</span>]]))</div><div class="line">	      &#125;);</div><div class="line">	  iconFeature.setStyle(iconStyle);</div><div class="line">	  </div><div class="line">	  <span class="keyword">if</span>(labelSource == <span class="literal">null</span>)&#123;</div><div class="line">		  labelSource = <span class="keyword">new</span> ol.source.Vector(&#123;</div><div class="line">			  <span class="attr">wrapX</span>: <span class="literal">false</span></div><div class="line">		      &#125;);</div><div class="line">		  labelLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</div><div class="line">		        <span class="attr">source</span>: labelSource,</div><div class="line">		        <span class="attr">style</span>:iconStyle</div><div class="line">		      &#125;);</div><div class="line">	  &#125;</div><div class="line">  	labelSource.addFeature(iconFeature);		  </div><div class="line">  	map.addLayer(labelLayer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f93gwvbbjgg30yj0hqh1u.gif" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">MapX.prototype.draw = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</div><div class="line">	 <span class="keyword">var</span> vectorSource = <span class="keyword">new</span> ol.source.Vector(&#123;</div><div class="line">		  <span class="attr">wrapX</span>: <span class="literal">false</span></div><div class="line">	&#125;);</div><div class="line">	 <span class="keyword">var</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</div><div class="line">        <span class="attr">source</span>: vectorSource,</div><div class="line">        <span class="attr">style</span>: <span class="keyword">new</span> ol.style.Style(&#123;</div><div class="line">            <span class="attr">fill</span>: <span class="keyword">new</span> ol.style.Fill(&#123;</div><div class="line">              <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.2)'</span></div><div class="line">            &#125;),</div><div class="line">            <span class="attr">stroke</span>: <span class="keyword">new</span> ol.style.Stroke(&#123;</div><div class="line">              <span class="attr">color</span>: <span class="string">'blue'</span>,</div><div class="line">              <span class="attr">width</span>: <span class="number">2</span></div><div class="line">            &#125;),</div><div class="line">            <span class="attr">image</span>: <span class="keyword">new</span> ol.style.Circle(&#123;</div><div class="line">              <span class="attr">radius</span>: <span class="number">7</span>,</div><div class="line">              <span class="attr">fill</span>: <span class="keyword">new</span> ol.style.Fill(&#123;</div><div class="line">                <span class="attr">color</span>: <span class="string">'#ffcc33'</span></div><div class="line">              &#125;)</div><div class="line">            &#125;)</div><div class="line">          &#125;)</div><div class="line">	  &#125;);</div><div class="line">	  </div><div class="line">  	map.addLayer(vectorLayer); </div><div class="line">	  </div><div class="line">  	<span class="keyword">var</span> drawFeature = <span class="keyword">new</span> ol.interaction.Draw(&#123;</div><div class="line">		<span class="attr">source</span>: vectorSource,</div><div class="line">	  	<span class="attr">type</span>: type</div><div class="line">	&#125;);</div><div class="line">	map.addInteraction(drawFeature);		    		  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在1中介绍了一下Openlayers中常用的类的功能，下面从功能实现的角度，用代码说明如何将这些类组合在一起封装成可以直接使用的地图操作方法&lt;/p&gt;
&lt;h1 id=&quot;地图功能&quot;&gt;&lt;a href=&quot;#地图功能&quot; class=&quot;headerlink&quot; title=&quot;地图功能&quot;&gt;&lt;/a&gt;地图功能&lt;/h1&gt;&lt;p&gt;我们将这些地图常用功能简单封装了一下（不知羞耻的将该类称之为&lt;code&gt;Mapx&lt;/code&gt;），方便在按钮的&lt;code&gt;onclick&lt;/code&gt;事件中调用，主要有测量、轨迹回放、绘图、添加位置标记功能。功能的实现参考了Openlayers官网的&lt;a href=&quot;http://openlayers.org/en/latest/examples/index.html&quot;&gt;Example&lt;/a&gt;，并在此基础修改完善，使其更加符合实际使用场景。比如，测量功能，官方示例中无法退出测量功能，并且测量时所标绘的图形也无法移除。&lt;/p&gt;
    
    </summary>
    
      <category term="GIS" scheme="https://GISering.github.io/categories/GIS/"/>
    
      <category term="Front" scheme="https://GISering.github.io/categories/GIS/Front/"/>
    
    
      <category term="Openlayers" scheme="https://GISering.github.io/tags/Openlayers/"/>
    
      <category term="WebGIS" scheme="https://GISering.github.io/tags/WebGIS/"/>
    
  </entry>
  
  <entry>
    <title>JS/DOM和jQuery之于HTML元素</title>
    <link href="https://GISering.github.io/2016/10/23/JS-DOM%E5%92%8CjQuery%E4%B9%8B%E4%BA%8EHTML%E5%85%83%E7%B4%A0/"/>
    <id>https://GISering.github.io/2016/10/23/JS-DOM和jQuery之于HTML元素/</id>
    <published>2016-10-23T06:50:18.000Z</published>
    <updated>2016-10-28T03:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端的东西就是麻烦，乱七八糟的东西什么都得会。初学js和jQuery，作前端开发时，经常对html元素的创建、获取、设置等方法模糊不清，这里索性把js和jQuery一些常用的方法对比记下来方便记忆学习。</p>
<a id="more"></a>
<h2 id="创建element的方法"><a href="#创建element的方法" class="headerlink" title="创建element的方法"></a>创建element的方法</h2><ol>
<li>使用原生js<ul>
<li><code>document.createElement(nodeName)</code><br>  这里nodename可以是‘div’，‘button’，‘h1’等</li>
</ul>
</li>
<li>使用jQuery<ul>
<li><code>$(tag)</code><br>  这里tag可以是<code>&lt;div&gt;&lt;/div&gt;</code>，<code>&lt;button/&gt;</code> 等闭合标签</li>
</ul>
</li>
</ol>
<h2 id="获取element的方法"><a href="#获取element的方法" class="headerlink" title="获取element的方法"></a>获取element的方法</h2><ol>
<li>使用原生js<ul>
<li><code>document.getElementById(id)</code></li>
<li><code>document.getElementByName(name)</code></li>
<li><code>document.getElementByTagName(tag)</code></li>
</ul>
</li>
<li>使用jQuery<ul>
<li><code>$(&#39;#id&#39;)</code>根据元素id值获取，这里’#id‘例如’#btn‘ ，’#frm‘等</li>
<li><code>$(&#39;tag&#39;)</code>根据元素标签名获取，这里’tag‘例如’p‘，’h1‘</li>
<li><code>$(&#39;.classname&#39;)</code>根据元素类名获取</li>
</ul>
</li>
</ol>
<h2 id="获取和设置element属性的方法"><a href="#获取和设置element属性的方法" class="headerlink" title="获取和设置element属性的方法"></a>获取和设置element属性的方法</h2><ol>
<li>使用原生js<ol>
<li>获取<ul>
<li><code>element.id</code> 获取元素id值</li>
<li><code>element.className</code> 获取元素的class属性</li>
<li><code>element.getAttribute(attriName)</code> 根据属性名获取属性值</li>
<li><code>element.style</code> 获取元素的样式</li>
</ul>
</li>
<li>设置<ul>
<li><code>element.id</code> 设置元素id值</li>
<li><code>element.className</code> 设置元素的class属性</li>
<li><code>element.setAttribute(attriName)</code> 根据属性名设置属性值</li>
<li><code>element.style</code> 设置元素的样式，如<code>element.style.margin = &#39;5px&#39;</code></li>
</ul>
</li>
</ol>
</li>
<li><p>使用jQuery</p>
<ol>
<li>获取<ul>
<li><code>attr(&#39;id&#39;)</code>获取元素id值</li>
<li><code>val()</code> 获取通过value属性设置的值 </li>
<li><code>css(name)</code>获取元素某一<strong><em>style</em></strong>属性，例如<code>$(&quot;p&quot;).css(&quot;color&quot;)</code></li>
</ul>
</li>
<li><p>设置</p>
<ul>
<li><code>attr(&#39;id&#39;, idName)</code>设置元素id值为idName</li>
<li><code>val(value)</code> 设置value属性值</li>
<li><p><code>addClass(className)</code>设置元素的class</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(&quot;#div1&quot;).addClass(&quot;important&quot;)//添加一个class</div><div class="line">$(&quot;#div1&quot;).addClass(&quot;important blue&quot;)//添加多个class</div></pre></td></tr></table></figure>
</li>
<li><p><code>attr(attriName, value)</code> 设置元素的属性值</p>
</li>
<li><p><code>css(name, value)</code>设置元素的css属性，例如  </p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>) <span class="comment">//设置单个style属性</span></div><div class="line">$(<span class="string">"p"</span>).css(&#123;</div><div class="line">	<span class="string">"color"</span>: <span class="string">"red"</span>,</div><div class="line">	<span class="string">"padding"</span>: <span class="string">"5px"</span>,</div><div class="line">	<span class="string">"font-size"</span>: <span class="string">"20px"</span></div><div class="line">&#125;);<span class="comment">//设置多个style属性</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="jQuery和DOM对象之间的转换"><a href="#jQuery和DOM对象之间的转换" class="headerlink" title="jQuery和DOM对象之间的转换"></a>jQuery和DOM对象之间的转换</h2><p>为方便识别，在表示jQuery对象的变量前加上\$，如<code>var $variable = jQuery</code>， 普通DOM变量名保持普通命名方法</p>
<ol>
<li><p>jQuery对象转为DOM对象</p>
<ul>
<li><p>使用索引[index]</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var $v = $(&quot;#v&quot;); //jQuery对象</div><div class="line">var v = $v[0];//DOM对象</div></pre></td></tr></table></figure>
</li>
<li><p>使用方法<code>get(index)</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var $v = $(&quot;v&quot;); //jQuery对象</div><div class="line">var v = $v.get(0);//DOM对象</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>DOM对象转为jQuery对象</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var v = document.getElementById(&quot;v&quot;);//DOM对象</div><div class="line">var $v = $(v);//jQuery对象</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端的东西就是麻烦，乱七八糟的东西什么都得会。初学js和jQuery，作前端开发时，经常对html元素的创建、获取、设置等方法模糊不清，这里索性把js和jQuery一些常用的方法对比记下来方便记忆学习。&lt;/p&gt;
    
    </summary>
    
      <category term="Front" scheme="https://GISering.github.io/categories/Front/"/>
    
    
      <category term="jQuery" scheme="https://GISering.github.io/tags/jQuery/"/>
    
      <category term="Html" scheme="https://GISering.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>Openlayers3基本地图功能实现(1)</title>
    <link href="https://GISering.github.io/2016/10/22/Openlayer3%E5%9F%BA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B01/"/>
    <id>https://GISering.github.io/2016/10/22/Openlayer3基本地图功能实现1/</id>
    <published>2016-10-22T13:57:52.000Z</published>
    <updated>2016-10-28T03:18:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，作为一个学GIS出身的同学，本科期间净弄些桌面的开发和空间分析方面的东西，读硕士的时候也是东搞搞、西瞅瞅，一会搞图像处理，一会对Hadoop有了兴趣搞了一段时间机器学习算法，结果落入了那种感觉什么都会，什么又都不会的田地！好尴尬呀~😂。WebGIS的东西自然也是浅尝辄止，也就用过ArcServer发布过几次地图，借助ArcObjects写过几个地图服务，所以对地图在前端显示的功能原理一概一知半解。Openlayers也是这次和我一起开发之前说的那个离线地图控件的同事发现的，在这之前真心没有听过。</p>
<a id="more"></a>
<h1 id="关于Openlayers"><a href="#关于Openlayers" class="headerlink" title="关于Openlayers"></a>关于Openlayers</h1><p>Openlayers是一个WebGIS前端开源JavaScript库，主要用于在桌面浏览器和手机浏览器中建立交互式的地图。Openlayers支持的地图来源包括Google Maps、Yahoo Map、Microsoft的Bing Map、以及OpenStreet Map等等，除此之外，Openlayers实现访问地理空间数据的方法都符合行业标准，支持Open GIS协会制定的WMS和WFS等网络服务规范，可以通过远程服务的方式，例如你可以将ArcServer发布的切片地图利用Openlayers显示在Web浏览器上。  </p>
<p>下面简单说明一下Openlayers中比较重要的几个对象：</p>
<h2 id="ol-Map"><a href="#ol-Map" class="headerlink" title="ol.Map"></a>ol.Map</h2><p>ol.Map对象就像一个容器，里面可以放置如layers、control、overlay、interaction等用于控制地图及地图交互的对象，从ol.Map的类方法就可以看出，它可以控制这些对象的添加和删除。</p>
<h2 id="ol-View"><a href="#ol-View" class="headerlink" title="ol.View"></a>ol.View</h2><p>从ol.View的类方法可以看出，它提供了一些如设置地图中心点、缩放级别、分辨率的方法。ol.View对象主要是控制地图与人的交互，如进行缩放，调节分辨率、地图的旋转等控制。也就是说每个map对象必须包含一个view对象部分，用于控制与用户的交互。</p>
<h2 id="ol-layer-Layer"><a href="#ol-layer-Layer" class="headerlink" title="ol.layer.Layer"></a>ol.layer.Layer</h2><p>地图是由一个或多个图层组成的，使用不同的图层存储不同类型的地物，比如由存储道路的图层，有展示拥堵情况的图层，通常还有一个含有基础地理信息（比如政区划分）的底图图层。在OpenLayers中，图层是使用Layer对象表示的，主要有热度图层(heatmapLayer)、图片图层(imageLayer)、切片图层(tileLayer) 和矢量图层(vectorLayer)四种类型，它们都是继承Layer类的。</p>
<h2 id="ol-layer-Vector"><a href="#ol-layer-Vector" class="headerlink" title="ol.layer.Vector"></a>ol.layer.Vector</h2><p>矢量地图，是由很多要素组成的，每个要素都有自己的地理坐标，基于数学规则，无论矢量地图怎么放大，地图都不会失真。它是 OpenLayers 中非常重要的一种图层类型，利用矢量地图可以实现非常多的功能，如动态标绘、调用 WFS 服务、编辑要素、可点击的要素、动态加载要素等等。</p>
<p>矢量图层是在客户端渲染的，在Web环境中，对应的就是浏览器。构成一个矢量图层的包含一个数据（source）和一个样式（style），数据构成矢量图层的要素，样式规定要素显示的方式和外观。一个初始化成功的矢量图层包含一个到多个要素（feature），每个要素由地理属性（geometry）和多个其他的属性，可能包含名称等。结构如下图：<br><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f93pw47q7cj30j708x3z7.jpg" alt="-c"></p>
<h2 id="ol-Control"><a href="#ol-Control" class="headerlink" title="ol.Control"></a>ol.Control</h2><p>每一个地图应用都应该有一些工具方便用户控制地图的行为，比如缩放，全屏，坐标、比例尺、地图旋转控件等，ol.Control是这些控件类的基类。通过<code>ol.Map</code>对象<code>addControl()</code>方法可将这些控件添加到地图中去。</p>
<h2 id="ol-Overlay"><a href="#ol-Overlay" class="headerlink" title="ol.Overlay"></a>ol.Overlay</h2><p>Overlay从名字上看，是覆盖图、覆盖物的意思，主要的用途就是在地图之上再覆盖一层，用以显示额外的可见元素，可见元素一般是 HTML 元素，利用 overlay，可以将可见元素放置到地图的任意位置，形成地图上再浮动一层的效果。例如在地图上相应的坐标放置一个标志、标签，利用overlay都可以做到，具体来说，点击地图上某位置，在点击位置弹出弹出框就是利用了overlay</p>
<h1 id="地图功能"><a href="#地图功能" class="headerlink" title="地图功能"></a>地图功能</h1><p>为了使调用方便，我们将这些地图常用功能简单封装了一下，方便在按钮的<code>onclick</code>事件中调用</p>
<h2 id="测量"><a href="#测量" class="headerlink" title="测量"></a>测量</h2><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f93guaw67hg30yj0hqe81.gif" alt=""></p>
<h2 id="轨迹回放"><a href="#轨迹回放" class="headerlink" title="轨迹回放"></a>轨迹回放</h2><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f93guw12dkg30yj0hqjyu.gif" alt=""></p>
<h2 id="添加位置标记"><a href="#添加位置标记" class="headerlink" title="添加位置标记"></a>添加位置标记</h2><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f93gwvbbjgg30yj0hqh1u.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说来惭愧，作为一个学GIS出身的同学，本科期间净弄些桌面的开发和空间分析方面的东西，读硕士的时候也是东搞搞、西瞅瞅，一会搞图像处理，一会对Hadoop有了兴趣搞了一段时间机器学习算法，结果落入了那种感觉什么都会，什么又都不会的田地！好尴尬呀~😂。WebGIS的东西自然也是浅尝辄止，也就用过ArcServer发布过几次地图，借助ArcObjects写过几个地图服务，所以对地图在前端显示的功能原理一概一知半解。Openlayers也是这次和我一起开发之前说的那个离线地图控件的同事发现的，在这之前真心没有听过。&lt;/p&gt;
    
    </summary>
    
      <category term="GIS" scheme="https://GISering.github.io/categories/GIS/"/>
    
      <category term="Front" scheme="https://GISering.github.io/categories/GIS/Front/"/>
    
    
      <category term="Openlayers" scheme="https://GISering.github.io/tags/Openlayers/"/>
    
      <category term="WebGIS" scheme="https://GISering.github.io/tags/WebGIS/"/>
    
  </entry>
  
  <entry>
    <title>毕业&amp;工作三个月了</title>
    <link href="https://GISering.github.io/2016/10/12/%E6%AF%95%E4%B8%9A&amp;%E5%B7%A5%E4%BD%9C%E4%B8%89%E4%B8%AA%E6%9C%88%E4%BA%86/"/>
    <id>https://GISering.github.io/2016/10/12/毕业&amp;工作三个月了/</id>
    <published>2016-10-12T14:24:54.000Z</published>
    <updated>2016-10-13T13:14:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年二零一六年六月份告别学生时代，七月一日正式入职工作，时间总是那么快，还没来得及驻足就溜走了，掐指一算：我**已经工作三个月了 (╯︵╰)，趁着中午休息的时间回忆一下这三个月的心路历程。<br><a id="more"></a>  </p>
<p>虽说是工作了，但是感觉上和读研时给老板干活没有太大的区别，要真说区别最大的地方就是拿的饭票比以前多了点😂。言归正传，七月刚入职时，所在部门搞了一堆培训，从管理、业务到电力基础知识来了一遍，一周左右的时间一直在听课，每项结束之后还有个考核，作为工科生的我，没逻辑的东西实在听不进去，所以上课的时候总是打盹只断断续续的听了一点，了解了一下部门的业务范围和自己所在岗位的工作内容，其它东西一概记不住，考核结果自然不怎么理想，好在我是研发岗位，保持淡定···，希望在以后的时间中能够慢慢理解掌握这些知识吧，毕竟研发脱离不开业务。</p>
<p>七月下旬的时候接到上面的通知要做一个移动线路巡检系统开发项目，系统要求基于SSM框架开发，由于以前都是用PHP做Web开发，窃以为J2EE的玩意太过臃肿远远没有PHP来的精巧和优雅，所以对J2EE家族的技术是陌生的，这个项目对自己还是有很大的挑战性。磨刀不误砍柴工，我喜欢在使用一个技术的时候把它的前前后后都整清楚，这样有种掌控一切的成就感，不然我总感觉没有“安全感”，然而一口吃个胖子总是很难，所以这往往让我陷入很多的挫败之中。不出所料，为了弄清楚<code>Mybatis</code>和<code>SpringMVC</code>底层的流转机制，我查阅了很多资料，看了很多大牛写的博客，但只是有了一个模糊的认识，了解了几个新名词、知道了用SSM开发的流程套路，和自己想要的结果有着很大的差距，这让我陷入了慌乱之中——原理都没弄清楚，能干活么！</p>
<p>时间不等人，由于进度问题，在上面的再三催促下，我不得不硬着头皮，干！！！怀着惴惴不安的心情我就真的干了，从简单的功能搞起，先写前端（一直视前端为洪水猛兽的我不得不学起了<code>Html、JS/jQuery、EasyUI</code>等等东西，甚是麻烦），再写dao层、service层、control层，就这样我按照套路一步步写了下去，几番调试终于运行成果，当看到数据库里冰冷的数据经过一行行代码处理优雅的展现在略显粗糙界面上时，终于找回了些许成就感，此时的我又拾起了信心想要弄清楚背后所有的原理···想如果一个人能如此折腾一样东西，我想那是源于热爱吧！如你所料，我喜欢写程序，喜欢它的规范、严谨、精巧，喜欢它给我带来的成就感和满足感(＾－＾)V，当然最关键的是它还能帮我挣饭票啊~~~ </p>
<p>最近在做一个国网的SG-UAP平台开发下的离线地图插件开发，SG-UAP多么的坑爹就不说了，给的开发文档写的一塌糊涂，我想可能平台开发人员也没有整清楚吧！感觉在SG-UAP上面学不到什么靠谱的东西，所以对这个插件实在提不起兴趣，但上面一再叮嘱要弄好，没办法还是得干！！！还好现在我找到了G点，就是利用<code>OpenLayer</code>实现离线地图的显示、测量、定位等功能，虽然是GIS专业出身，但实在不好意思说自己对<strong>瓦片</strong>技术具体实现原理不怎么熟悉，所以借此机会可以好好学习一下。忽然发现自己是个”唯利是图“的人——如果做一件工作学不到实在知识，就会没有兴趣、产生消极的态度，不知道这是缺点还是优点，但以后还是尽量克服吧！！！  </p>
<p>总的来说，三个月来收货很大，接触了以前想要学却没能沉下心去学的东西，像前端的技术虽然很繁杂但一旦掌握，能够设计出优雅的界面还是很让我兴奋的。接下来的目标就是跟着师兄做好PHP项目，前端框架想用BootStrap，依然需要学学学！！！加油吧，老骚年！！！😎😎😎</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年二零一六年六月份告别学生时代，七月一日正式入职工作，时间总是那么快，还没来得及驻足就溜走了，掐指一算：我**已经工作三个月了 (╯︵╰)，趁着中午休息的时间回忆一下这三个月的心路历程。&lt;br&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="https://GISering.github.io/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://GISering.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Python需要注意的杂七杂八</title>
    <link href="https://GISering.github.io/2016/10/12/Python%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    <id>https://GISering.github.io/2016/10/12/Python需要注意的杂七杂八/</id>
    <published>2016-10-12T13:52:25.000Z</published>
    <updated>2016-10-12T14:17:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>从接触Python以来，一直觉得Python是一门神奇、优雅、高效（开发效率）的语言。网上很多人说Python多么多么简单，如果是和C++相比那确实是简单不知道哪里去了，但随着自己遇到的问题越来越多，愈发觉得Python不是那么简单，所以这里结合网上整理的材料和自己的平时遇到的问题总结了一些Python中常见的“坑”。</p>
<a id="more"></a>
<h1 id="Python语言特性"><a href="#Python语言特性" class="headerlink" title="Python语言特性"></a>Python语言特性</h1><h2 id="Python的函数参数传递"><a href="#Python的函数参数传递" class="headerlink" title="Python的函数参数传递"></a>Python的函数参数传递</h2><p>看两个例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></div><div class="line">    a = <span class="number">2</span></div><div class="line"><span class="keyword">print</span> a  <span class="comment"># 1</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></div><div class="line">    a.append(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> a  <span class="comment"># [1]</span></div></pre></td></tr></table></figure>
<p>所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。</p>
<p>这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而list,dict等则是可以修改的对象。(这就是这个问题的重点)</p>
<p>当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改.</p>
<p>如果还不明白的话,这里有更好的解释: <a href="http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference" target="_blank" rel="external">http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference</a></p>
<h2 id="Python中的元类-metaclass"><a href="#Python中的元类-metaclass" class="headerlink" title="Python中的元类(metaclass)"></a>Python中的元类(metaclass)</h2><p>这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a></p>
<h2 id="staticmethod和-classmethod"><a href="#staticmethod和-classmethod" class="headerlink" title="@staticmethod和@classmethod"></a>@staticmethod和@classmethod</h2><p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"executing foo(%s)"</span>%(x)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"executing foo(%s,%s)"</span>%(self,x)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"executing class_foo(%s,%s)"</span>%(cls,x)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"executing static_foo(%s)"</span>%x</div><div class="line"></div><div class="line">a=A()</div></pre></td></tr></table></figure>
<p>这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>).类方法一样,只不过它传递的是类而不是实例,<code>A.class_foo(x)</code>.注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好.</p>
<p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p>
<table>
<thead>
<tr>
<th style="text-align:left">\</th>
<th style="text-align:left">实例方法</th>
<th style="text-align:left">类方法</th>
<th style="text-align:left">静态方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">a = A()</td>
<td style="text-align:left">a.foo(x)</td>
<td style="text-align:left">a.class_foo(x)</td>
<td style="text-align:left">a.static_foo(x)</td>
</tr>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">不可用</td>
<td style="text-align:left">A.class_foo(x)</td>
<td style="text-align:left">A.static_foo(x)</td>
</tr>
</tbody>
</table>
<p>更多关于这个问题:<a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></p>
<h2 id="类变量和实例变量"><a href="#类变量和实例变量" class="headerlink" title="类变量和实例变量"></a>类变量和实例变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    name=<span class="string">"aaa"</span></div><div class="line"></div><div class="line">p1=Person()</div><div class="line">p2=Person()</div><div class="line">p1.name=<span class="string">"bbb"</span></div><div class="line"><span class="keyword">print</span> p1.name  <span class="comment"># bbb</span></div><div class="line"><span class="keyword">print</span> p2.name  <span class="comment"># aaa</span></div><div class="line"><span class="keyword">print</span> Person.name  <span class="comment"># aaa</span></div></pre></td></tr></table></figure>
<p>类变量就是供类使用的变量,实例变量就是供实例使用的.</p>
<p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p>
<p>可以看看下面的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    name=[]</div><div class="line"></div><div class="line">p1=Person()</div><div class="line">p2=Person()</div><div class="line">p1.name.append(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> p1.name  <span class="comment"># [1]</span></div><div class="line"><span class="keyword">print</span> p2.name  <span class="comment"># [1]</span></div><div class="line"><span class="keyword">print</span> Person.name  <span class="comment"># [1]</span></div></pre></td></tr></table></figure>
<p>参考:<a href="http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block" target="_blank" rel="external">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></p>
<h2 id="Python自省"><a href="#Python自省" class="headerlink" title="Python自省"></a>Python自省</h2><p>这个也是python彪悍的特性.</p>
<p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p>
<h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><p>可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> iterable&#125;</div></pre></td></tr></table></figure>
<h2 id="Python中单下划线和双下划线"><a href="#Python中单下划线和双下划线" class="headerlink" title="Python中单下划线和双下划线"></a>Python中单下划线和双下划线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            self.__superprivate = <span class="string">"Hello"</span></div><div class="line"><span class="meta">... </span>            self._semiprivate = <span class="string">", world!"</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mc = MyClass()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mc.__superprivate</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: myClass instance has no attribute <span class="string">'__superprivate'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mc._semiprivate</div><div class="line">, world!</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mc.__dict__</div><div class="line">&#123;<span class="string">'_MyClass__superprivate'</span>: <span class="string">'Hello'</span>, <span class="string">'_semiprivate'</span>: <span class="string">', world!'</span>&#125;</div></pre></td></tr></table></figure>
<p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突.</p>
<p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.</p>
<p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名.</p>
<p>详情见:<a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p>
<p>或者: <a href="http://www.zhihu.com/question/19754941" target="_blank" rel="external">http://www.zhihu.com/question/19754941</a></p>
<h2 id="字符串格式化-和-format"><a href="#字符串格式化-和-format" class="headerlink" title="字符串格式化:%和.format"></a>字符串格式化:%和.format</h2><p>.format在许多方面看起来更便利.对于<code>%</code>最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;hi there %s&quot; % name</div></pre></td></tr></table></figure>
<p>但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;hi there %s&quot; % (name,)   # 提供一个单元素的数组而不是一个参数</div></pre></td></tr></table></figure>
<p>但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.</p>
<p>你为什么不用它?</p>
<ul>
<li>不知道它(在读这个之前)</li>
<li>为了和Python2.5兼容(譬如logging库建议使用<code>%</code>(<a href="https://github.com/taizilongxu/interview_python/issues/4" target="_blank" rel="external">issue #4</a>))</li>
</ul>
<p><a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format" target="_blank" rel="external">http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format</a></p>
<h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><p>这个是stackoverflow里python排名第一的问题,值得一看: <a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python</a></p>
<p>这是中文版: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html" target="_blank" rel="external">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html</a></p>
<h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="*args and **kwargs"></a><code>*args</code> and <code>**kwargs</code></h2><p>用<code>*args</code>和<code>**kwargs</code>只是为了方便并没有强制使用它们.</p>
<p>当你不确定你的函数里将要传递多少参数时你可以用<code>*args</code>.例如,它可以传递任意数量的参数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_everything</span><span class="params">(*args)</span>:</span></div><div class="line">        <span class="keyword">for</span> count, thing <span class="keyword">in</span> enumerate(args):</div><div class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">'&#123;0&#125;. &#123;1&#125;'</span>.format(count, thing)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print_everything(<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cabbage'</span>)</div><div class="line"><span class="number">0.</span> apple</div><div class="line"><span class="number">1.</span> banana</div><div class="line"><span class="number">2.</span> cabbage</div></pre></td></tr></table></figure>
<p>相似的,<code>**kwargs</code>允许你使用没有事先定义的参数名:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">table_things</span><span class="params">(**kwargs)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</div><div class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">'&#123;0&#125; = &#123;1&#125;'</span>.format(name, value)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>table_things(apple = <span class="string">'fruit'</span>, cabbage = <span class="string">'vegetable'</span>)</div><div class="line">cabbage = vegetable</div><div class="line">apple = fruit</div></pre></td></tr></table></figure>
<p>你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给<code>*args</code>和<code>**kwargs</code>.命名参数在列表的最前端.例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">def table_things(titlestring, **kwargs)</div></pre></td></tr></table></figure>
<p><code>*args</code>和<code>**kwargs</code>可以同时在函数的定义中,但是<code>*args</code>必须在<code>**kwargs</code>前面.</p>
<p>当调用函数时你也可以用<code>*</code>和<code>**</code>语法.例如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_three_things</span><span class="params">(a, b, c)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;'</span>.format(a,b,c)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">'aardvark'</span>, <span class="string">'baboon'</span>, <span class="string">'cat'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print_three_things(*mylist)</div><div class="line"></div><div class="line">a = aardvark, b = baboon, c = cat</div></pre></td></tr></table></figure>
<p>就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*.</p>
<p><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs" target="_blank" rel="external">http://stackoverflow.com/questions/3394835/args-and-kwargs</a></p>
<h2 id="Python中重载"><a href="#Python中重载" class="headerlink" title="Python中重载"></a>Python中重载</h2><p>引自知乎:<a href="http://www.zhihu.com/question/20053359" target="_blank" rel="external">http://www.zhihu.com/question/20053359</a></p>
<p>函数重载主要是为了解决两个问题。</p>
<ol>
<li>可变参数类型。</li>
<li>可变参数个数。</li>
</ol>
<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p>
<p>好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p>
<p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。</p>
<p>好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p>
<p>当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:</p>
<ol>
<li>必须有一个内嵌函数</li>
<li>内嵌函数必须引用外部函数中的变量</li>
<li>外部函数的返回值必须是内嵌函数</li>
</ol>
<p>感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料.</p>
<p>重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上.</p>
<p>闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样.</p>
<h2 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h2><p>其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关.</p>
<p>推荐: <a href="http://www.zhihu.com/question/20125256" target="_blank" rel="external">知乎</a></p>
<h2 id="Python函数式编程"><a href="#Python函数式编程" class="headerlink" title="Python函数式编程"></a>Python函数式编程</h2><p>这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用.</p>
<p>推荐: <a href="http://coolshell.cn/articles/10822.html" target="_blank" rel="external">酷壳</a></p>
<p>python中函数式编程支持:</p>
<p>filter 函数的功能相当于过滤器。调用一个布尔函数<code>bool_func</code>来迭代遍历每个seq中的元素；返回一个使<code>bool_seq</code>返回值为true的元素的序列。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line">&gt;&gt;&gt;b = filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, a)</div><div class="line">&gt;&gt;&gt;<span class="keyword">print</span> b</div><div class="line">&gt;&gt;&gt;[<span class="number">6</span>,<span class="number">7</span>]</div></pre></td></tr></table></figure>
<p>map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = map(<span class="keyword">lambda</span> x:x*<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(a)</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<p>reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x*y,range(<span class="number">1</span>,<span class="number">4</span>))</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="Python里的拷贝"><a href="#Python里的拷贝" class="headerlink" title="Python里的拷贝"></a>Python里的拷贝</h2><p>引用和copy(),deepcopy()的区别</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]  <span class="comment">#原始对象</span></div><div class="line"></div><div class="line">b = a  <span class="comment">#赋值，传对象的引用</span></div><div class="line">c = copy.copy(a)  <span class="comment">#对象拷贝，浅拷贝</span></div><div class="line">d = copy.deepcopy(a)  <span class="comment">#对象拷贝，深拷贝</span></div><div class="line"></div><div class="line">a.append(<span class="number">5</span>)  <span class="comment">#修改对象a</span></div><div class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>)  <span class="comment">#修改对象a中的['a', 'b']数组对象</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'a = '</span>, a</div><div class="line"><span class="keyword">print</span> <span class="string">'b = '</span>, b</div><div class="line"><span class="keyword">print</span> <span class="string">'c = '</span>, c</div><div class="line"><span class="keyword">print</span> <span class="string">'d = '</span>, d</div><div class="line"></div><div class="line">输出结果：</div><div class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</div><div class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</div><div class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</div></pre></td></tr></table></figure>
<h2 id="Python垃圾回收机制"><a href="#Python垃圾回收机制" class="headerlink" title="Python垃圾回收机制"></a>Python垃圾回收机制</h2><p>Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>PyObject是每个对象必有的内容，其中<code>ob_refcnt</code>就是做为引用计数。当一个对象有新的引用时，它的<code>ob_refcnt</code>就会增加，当引用它的对象被删除，它的<code>ob_refcnt</code>就会减少.引用计数为0时，该对象生命就结束了。</p>
<p>优点:</p>
<pre><code>1. 简单
2. 实时性
</code></pre><p>缺点:</p>
<pre><code>1. 维护引用计数消耗资源
2. 循环引用
</code></pre><h3 id="标记-清除机制"><a href="#标记-清除机制" class="headerlink" title="标记-清除机制"></a>标记-清除机制</h3><p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p>
<h3 id="分代技术"><a href="#分代技术" class="headerlink" title="分代技术"></a>分代技术</h3><p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p>
<p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。</p>
<p>举例：<br>当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p>
<h2 id="Python的List"><a href="#Python的List" class="headerlink" title="Python的List"></a>Python的List</h2><p>推荐: <a href="http://www.jianshu.com/p/J4U6rR" target="_blank" rel="external">http://www.jianshu.com/p/J4U6rR</a></p>
<h2 id="Python的is"><a href="#Python的is" class="headerlink" title="Python的is"></a>Python的is</h2><p>is是对比地址,==是对比值</p>
<h2 id="read-readline和readlines"><a href="#read-readline和readlines" class="headerlink" title="read,readline和readlines"></a>read,readline和readlines</h2><ul>
<li>read        读取整个文件</li>
<li>readline    读取下一行,使用生成器方法</li>
<li>readlines   读取整个文件到一个迭代器以供我们遍历</li>
</ul>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ol>
<li>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三路握手的一部分。客户端把这段连接的序号设定为随机数 A。</li>
<li>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。</li>
<li>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。</li>
</ol>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>地址解析协议(Address Resolution Protocol): 根据IP地址获取物理地址的一个TCP/IP协</p>
<h2 id="urllib和urllib2的区别"><a href="#urllib和urllib2的区别" class="headerlink" title="urllib和urllib2的区别"></a>urllib和urllib2的区别</h2><p>这个面试官确实问过,当时答的urllib2可以Post而urllib不可以.</p>
<ol>
<li>urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。</li>
<li>urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。</li>
</ol>
<h2 id="网站用户密码保存"><a href="#网站用户密码保存" class="headerlink" title="网站用户密码保存"></a>网站用户密码保存</h2><ol>
<li>明文保存</li>
<li>明文hash后保存,如md5</li>
<li>MD5+Salt方式,这个salt可以随机</li>
<li>知乎使用了Bcrypy(好像)加密</li>
</ol>
<h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><table>
<thead>
<tr>
<th style="text-align:left">状态码</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1xx 报告</td>
<td style="text-align:left">接收到请求，继续进程</td>
</tr>
<tr>
<td style="text-align:left">2xx 成功</td>
<td style="text-align:left">步骤成功接收，被理解，并被接受</td>
</tr>
<tr>
<td style="text-align:left">3xx 重定向</td>
<td style="text-align:left">为了完成请求,必须采取进一步措施</td>
</tr>
<tr>
<td style="text-align:left">4xx 客户端出错</td>
<td style="text-align:left">请求包括错的顺序或不能完成</td>
</tr>
<tr>
<td style="text-align:left">5xx 服务器出错</td>
<td style="text-align:left">服务器无法完成显然有效的请求</td>
</tr>
</tbody>
</table>
<p>403: Forbidden<br>404: Not Found</p>
<p>HTTPS握手,对称加密,非对称加密,TLS/SSL,RSA</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从接触Python以来，一直觉得Python是一门神奇、优雅、高效（开发效率）的语言。网上很多人说Python多么多么简单，如果是和C++相比那确实是简单不知道哪里去了，但随着自己遇到的问题越来越多，愈发觉得Python不是那么简单，所以这里结合网上整理的材料和自己的平时遇到的问题总结了一些Python中常见的“坑”。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://GISering.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://GISering.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="https://GISering.github.io/2016/10/10/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://GISering.github.io/2016/10/10/PHP学习笔记/</id>
    <published>2016-10-10T13:05:27.000Z</published>
    <updated>2016-10-12T14:21:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前学PHP时写得一些关于基础语法的笔记，很基础。现在自己搭建了博客就把这个上传了。温习了一下笔记惊觉现在再也没有像以前那么踏实的学一样东西了，不是眼高手低、就是好高骛远。借此笔记缅怀一下充满干劲和激情学生时期，也激励一下自己！！！👊👊👊</p>
<a id="more"></a>
<h1 id="PHP引用类型"><a href="#PHP引用类型" class="headerlink" title="PHP引用类型"></a>PHP引用类型</h1><p><strong>PHP引用类型</strong>类似于C++语言中的“引用类型”，相当于是一个变量的别名，<strong>语法如下：</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">100</span>;</div><div class="line">$b = &amp;$a;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>其中变量<strong><em>b</em></strong>是变量<strong><em>a</em></strong>的引用。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a><code>注意:</code></h2><ul>
<li>只有变量才有引用</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$b = &amp;<span class="number">100</span> <span class="comment">//错误</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>一个变量值（如<strong><em>b</em></strong>）发生变化，另一个变量的值(<strong><em>a</em></strong>)也会发生变化</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">100</span>;</div><div class="line">$b = &amp;$a;</div><div class="line">$b = <span class="number">50</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"a = $a&lt;br&gt;"</span> ;</div><div class="line"><span class="keyword">echo</span> <span class="string">"b = $b"</span> ;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在使用<code>unset()</code>函数时，如果有引用关系，只是解除了这种引用关系，删除了一个别名，而另一个还在</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">100</span>;</div><div class="line">$b = &amp;$a;</div><div class="line"><span class="keyword">unset</span>(a);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($b))</div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"这个变量存在"</span>;<span class="comment">//输出</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"这个变量不存在"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果两个变量是引用关系，如果赋给其中一个变量的值是新的引用的话，择改变引用关系</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">100</span>;</div><div class="line">$b = &amp;$a;</div><div class="line">$c = <span class="number">50</span>;</div><div class="line">$b = &amp;$c;</div><div class="line">$b = <span class="number">25</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"a = $a&lt;br&gt;"</span> ;<span class="comment">// a = 100</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"b = $b&lt;br&gt;"</span> ;		<span class="comment">// b = 25</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"c = $c"</span> ;		<span class="comment">// c = 25</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP布尔类型"><a href="#PHP布尔类型" class="headerlink" title="PHP布尔类型"></a>PHP布尔类型</h1><ol>
<li><code>boolean</code>型的变量值可以为<code>true</code>、<code>false</code></li>
<li>当其他类型的变量转为布尔型时，以下这些值代表<code>false</code><strong>:</strong><ul>
<li>整型：<code>0</code></li>
<li>浮点型：<code>0</code></li>
<li>字符串：<code>&quot;&quot;</code>、<code>&quot;0&quot;</code></li>
<li>数组：<code>array()</code></li>
<li>特殊类型：<code>Null</code></li>
</ul>
</li>
</ol>
<h1 id="PHP字符串类型"><a href="#PHP字符串类型" class="headerlink" title="PHP字符串类型"></a>PHP字符串类型</h1><h2 id="字符串声明"><a href="#字符串声明" class="headerlink" title="字符串声明"></a>字符串声明</h2><h3 id="使用-quot-quot-和-39-39-声明"><a href="#使用-quot-quot-和-39-39-声明" class="headerlink" title="使用&quot;&quot;和&#39;&#39;声明"></a>使用<code>&quot;&quot;</code>和<code>&#39;&#39;</code>声明</h3><ol>
<li>在<strong>PHP</strong>中<strong>一个</strong>字符或者<strong>多个</strong>字符都是字符串；</li>
<li>在<strong>PHP</strong>中声明一个字符串必须用“<em>单引号</em>”或“<em>双引号</em>”引起来；</li>
<li>在单引号中不能使用<strong>单引号</strong>和<strong>双引号</strong>；</li>
<li>在双引号中可以使用<strong>单引号</strong>，但不能使用<strong>双引号</strong>；</li>
<li>如果想在字符串中使用<strong>双引号</strong>对某些短语进行强调，可以使用转移字符<code>&quot;\&quot;</code>。<h3 id="使用定界符-lt-lt-lt-任意字符串"><a href="#使用定界符-lt-lt-lt-任意字符串" class="headerlink" title="使用定界符&lt;&lt;&lt;+任意字符串"></a>使用<strong>定界符</strong><code>&lt;&lt;&lt;+任意字符串</code></h3></li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$var = <span class="number">100</span></div><div class="line">	$str = &lt;&lt;&lt;ss <span class="comment">//ss可以是任意字符串，后面紧跟回车符</span></div><div class="line">	Hello World! This is a <span class="string">"Demo"</span>;\n</div><div class="line">	The value of \$var is $var;</div><div class="line">ss;<span class="comment">//ss必须顶格写</span></div><div class="line">	<span class="keyword">echo</span> $str;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="单引号和双引号的区别"><a href="#单引号和双引号的区别" class="headerlink" title="单引号和双引号的区别"></a>单引号和双引号的区别</h2><ol>
<li>在双引号中可以解析变量，而在单引号中却不可以 </li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">100</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"The value of a is $a."</span>;<span class="comment">//The Value of a is 100.</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"The value of a is&#123;$a&#125;."</span>;<span class="comment">//The Value of a is 100.</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'The value of a is $a.'</span>;<span class="comment">//The value of a is $a.</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>在双引号中可以使用转义字符，而在单引号却不可以(只能转义<strong><em>单引号</em></strong>和<strong><em>转义字符</em></strong>)</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">100</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"The Value \$a = $a."</span>.;<span class="comment">// The value $a = 100.</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'The Value \$a = $a.'</span>;<span class="comment">//The value \$a = $a.</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'This is a \'string\' demo.'</span>;<span class="comment">//This is a 'string' demo;</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h1><h2 id="常量的声明、命名"><a href="#常量的声明、命名" class="headerlink" title="常量的声明、命名"></a>常量的声明、命名</h2><ol>
<li><strong>声明</strong>：使用函数<code>define(string name, mixedtype value)</code></li>
<li><strong>命名</strong>：以<strong>下划线</strong>或<strong>字母</strong>开始的字符串、通常大写</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	define(<span class="string">"CONSTANT"</span>, <span class="number">100</span>); <span class="comment">//CONSTANT是一个值为100的整型常量</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="常量的使用"><a href="#常量的使用" class="headerlink" title="常量的使用"></a>常量的使用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">define(<span class="string">"CONSTANT"</span>, <span class="number">100</span>);	</div><div class="line"><span class="keyword">if</span>(defined(<span class="string">"CONSTANT"</span>))</div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> CONSTANT;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> constant(<span class="string">"CONSTANT"</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>##<code>注意</code></p>
<ul>
<li>常量的值不能更改</li>
<li>常量只支持标准数据类型</li>
<li>常量不能使用<code>unset()</code>函数清除</li>
<li><code>define()</code>函数的第三个参数决定这个常量的名称是否支持大小写</li>
</ul>
<p>#PHP全局和局部变量</p>
<p>##全局变量</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$name = <span class="string">"Oozie"</span>;<span class="comment">//name 是一个全局变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo_name</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//在函数内部使用全局变量时，必须在**使用前**在函数内部加上 global 标识，否则在函数内部直接使用全局变量会错误。</span></div><div class="line">	<span class="keyword">global</span> $name;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"My name is $name"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo_name();<span class="comment">//My name is Oozie</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$name = <span class="string">"Oozie"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo_name</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	$name = <span class="string">"Mahout"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"My name is $name"</span>;<span class="comment">//局部变量优先访问</span></div><div class="line">&#125;</div><div class="line">echo_name();<span class="comment">//My name is Mahout</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久之前学PHP时写得一些关于基础语法的笔记，很基础。现在自己搭建了博客就把这个上传了。温习了一下笔记惊觉现在再也没有像以前那么踏实的学一样东西了，不是眼高手低、就是好高骛远。借此笔记缅怀一下充满干劲和激情学生时期，也激励一下自己！！！👊👊👊&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://GISering.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://GISering.github.io/tags/PHP/"/>
    
      <category term="基础" scheme="https://GISering.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>电力基础</title>
    <link href="https://GISering.github.io/2016/10/09/%E7%94%B5%E5%8A%9B%E5%9F%BA%E7%A1%80/"/>
    <id>https://GISering.github.io/2016/10/09/电力基础/</id>
    <published>2016-10-09T14:39:17.000Z</published>
    <updated>2016-10-09T14:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是刚进公司，部门给新员工作的电力基础知识培训时自己作的笔记，算是在脑海里有了个框架，以后的要学的东西还很多！！！😊</p>
<a id="more"></a>
<h1 id="1-输电"><a href="#1-输电" class="headerlink" title="1.输电"></a>1.输电</h1><h2 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1.基础知识"></a>1.1.基础知识</h2><ol>
<li>电力系统：由发、变、输、配、用电等设备和相应的辅助系统，按照规定的技术经济要求组成的一个统一的系统</li>
<li>输电线路<ol>
<li>主要作用：实现在负荷中心和电源中心的电能传输。</li>
<li>分类:<ul>
<li>按结构形式：架空线路、电缆线路、混合线路</li>
<li>按电流性质：交流电、直流电</li>
<li>按电压等级：特高压、超高压、高压</li>
</ul>
</li>
</ol>
</li>
<li>为什么采用<strong>高压输电</strong>：在输送功率不变的情况下，提高电压可以减少电流，从而可以降低电压降落和电能损耗，同时可以选择较细的导线，以节约电网投资。</li>
<li>架空线路<ul>
<li>基本组成：导线、避雷线、杆塔、绝缘子、金具</li>
<li>基本概念：<ul>
<li>杆塔高度、</li>
<li>杆塔呼称高、</li>
<li>档距、</li>
<li>代表档距、</li>
<li>耐张端</li>
<li>导线换相</li>
</ul>
</li>
<li>维护：巡视、大修、小修、导线弛度测量、绝缘子盐密度测量、接地电阻测量、零值瓷瓶测量、交叉跨越测量、接头测温、隐蔽工程开挖。</li>
</ul>
</li>
<li>电缆线路<ol>
<li>组成：导体、绝缘层、保护包皮</li>
<li>分类：单芯、三芯、四芯</li>
<li>维护：红外测温、测负荷及接地电流、电缆外套试验、避雷器带电测试、变频试验、线路参数试验等</li>
</ol>
</li>
</ol>
<h1 id="2-变电"><a href="#2-变电" class="headerlink" title="2.变电"></a>2.变电</h1><h1 id="3-配电"><a href="#3-配电" class="headerlink" title="3.配电"></a>3.配电</h1><h2 id="3-1基础知识"><a href="#3-1基础知识" class="headerlink" title="3.1基础知识"></a>3.1基础知识</h2><ol>
<li><p>电压等级分类：</p>
<ul>
<li>特高压：1000kV及以上。百万伏级交流和正负800千伏直流。 </li>
<li>超高压：330、500、750 kV。</li>
<li>中压：3～35 kV。</li>
<li>低压：0.4kV及以下。</li>
</ul>
</li>
<li><p>配电网的定义：电力网中重要起分配电能作用的网络就称为配电网</p>
<ul>
<li>按电压等级来分</li>
<li>按供电区功能来分</li>
</ul>
</li>
<li><p>配电网的特点</p>
<ul>
<li>配网网络结构比较复杂</li>
<li>配网设备数量巨大</li>
<li>配网设备异动较为频繁</li>
<li>配电管理包含电力线路的管理和变电设备的管理</li>
<li>配网调度业务繁忙，</li>
</ul>
</li>
<li>配电系统种类<ul>
<li>一次变压的配电系统<ul>
<li>只有一个变电所的一次变压系统</li>
<li>拥有高压配电所的一次变压供配电系统</li>
<li>高压深入负荷中心的一次变压供配电系统</li>
</ul>
</li>
<li>两次变压的配电系统</li>
<li>低压供配电系统</li>
</ul>
</li>
<li>配电网供电基本要求：安全、可靠、优质、经济</li>
</ol>
<h2 id="3-2-常用电器设备"><a href="#3-2-常用电器设备" class="headerlink" title="3.2.常用电器设备"></a>3.2.常用电器设备</h2><ol>
<li><strong>馈线：</strong>馈线是配电网中的一个术语，它可以指与任意配网节点相连接的支路，可以是馈入支路；</li>
<li><strong>电力变压器：</strong>：变电所的核心设备，通过它将一种电压的交流电能转换成另一种电压的交流电能；</li>
<li><strong>高压开断设备：</strong></li>
<li><strong>高压断路器：</strong>带有强力灭弧装置的高压开关设备，用于供配电系统发生故障时与保护装置配合自动切断系统的短路电流；</li>
<li><strong>隔离刀闸：</strong>隔离开关的主要功能是隔离电源，当它处于分闸状态时，有着明显的断口，使处于其后的高压母线、断路器等电力设备与电源或带电高压母线隔离，以保障检修工作的安全</li>
<li><strong>高压负荷开关：</strong>高压负荷开关是一种介乎隔离开关与断路器之间的结构简单的高压电器，具有简单的灭弧装置，常用来分合负荷电流和较小的过负荷电流，但不能分断短路电流。</li>
<li><strong>高压熔断器：</strong>配电网络中人为设置的最薄弱的元件。当其所在电路发生短路或长期过载时，它便因过热而熔断，并通过灭弧介质将熔断时产生的电弧熄灭，最终开断电路，以保护电力电路及其他的电气设备。</li>
<li><strong>低压开关设备：</strong></li>
<li><strong>互感器：</strong></li>
<li><strong>成套电器：</strong><ol>
<li>环网柜供电单元</li>
<li>预装式变电站</li>
<li>高压开关柜</li>
<li>低压开关柜</li>
</ol>
</li>
</ol>
<h2 id="3-3-配电网络结构"><a href="#3-3-配电网络结构" class="headerlink" title="3.3.配电网络结构"></a>3.3.配电网络结构</h2><h3 id="3-3-1-网络结构分类"><a href="#3-3-1-网络结构分类" class="headerlink" title="3.3.1.网络结构分类"></a>3.3.1.网络结构分类</h3><ol>
<li>放射式<ul>
<li>单回路放射式</li>
<li>双回路放射式</li>
<li>带公共备用线的放射式网络结构</li>
</ul>
</li>
<li>树干式<ul>
<li>单回路树干式</li>
<li>双回路树干式</li>
</ul>
</li>
<li>环式</li>
</ol>
<h3 id="3-3-2-网络结构适用对象"><a href="#3-3-2-网络结构适用对象" class="headerlink" title="3.3.2.网络结构适用对象"></a>3.3.2.网络结构适用对象</h3><ol>
<li>中压系统<ul>
<li>对于城市非重要用户及郊区，可靠性要求不高，可采用树干式结构。<ul>
<li>对负荷密度大，且供电要求高的用户可采用双电源双回路树干式或环式结构。</li>
<li>对于提供双电源有困难，用户的供电可靠性要求又较高的情况，可采用放射式结构。</li>
</ul>
</li>
</ul>
</li>
<li>低压系统：环式结构使用较少<ul>
<li>对于单台设备容量较大或较重要场合，一般采用放射式结构。<ul>
<li>对于非重要用电设备，用电性质相近，又便于线路敷设时，一般采用树干式结构。</li>
<li>对于重要用电设备，可采用双电源双回路树干式结构或双电源双回路放射式结构。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="3-4-配电网络架构与敷设"><a href="#3-4-配电网络架构与敷设" class="headerlink" title="3.4.配电网络架构与敷设"></a>3.4.配电网络架构与敷设</h2><h2 id="3-5-配电业务管理"><a href="#3-5-配电业务管理" class="headerlink" title="3.5.配电业务管理"></a>3.5.配电业务管理</h2><ol>
<li><p>两票三制：是电业安全生产保证体系的几项最基本的工作制度，是电力企业保人身、保电网、保设备的重要手段和措施。任何人为的责任事故，均可在其“两票三制”的执行上找到原因。</p>
<ul>
<li>两票：工作票、操作票</li>
<li>三制：交接班制度、设备定期实验及轮换制度、巡回检查制度</li>
</ul>
</li>
<li>配电巡视管理<ul>
<li>定期巡视</li>
<li>特殊性巡视</li>
<li>夜间巡视</li>
<li>故障性巡视</li>
<li>监察性巡视</li>
</ul>
</li>
<li>配电缺陷管理<ul>
<li>危急缺陷：随时可能导致发生事故或危及人身安全的缺陷，必须尽快消除或采取必要的安全技术措施进行临时处理。–<strong>24小时内解决</strong></li>
<li>重大缺陷：指缺陷比较严重，但设备仍可短期继续安全运行。该缺陷应在短期内消除，消除前应加强监视。–<strong>三个月内解决</strong></li>
<li>一般缺陷：指对近期安全运行影响不大的缺陷。可列入年、季检修计划或日常维护工作中去消除。</li>
</ul>
</li>
</ol>
<h1 id="4-数据采集"><a href="#4-数据采集" class="headerlink" title="4.数据采集"></a>4.数据采集</h1><ol>
<li>常规数据采集</li>
<li>滚动运维采集</li>
<li><p>营配贯通：包括运检、营销相关设备的采集和在电网GIS平台、PMS2.0支撑工具，营销业务系统等系统给的录入</p>
<ul>
<li>运检财路设备：低压线路、低压电缆、低压站房、低压站内设备。</li>
<li>营销采录设备：高压用户类、营销资源类。(收钱的)</li>
</ul>
</li>
<li><p>地下电缆采集</p>
<ul>
<li>主网数据采集：发电数据、输电数据，35KV及以上</li>
<li>配网数据采集：10KV及以上</li>
</ul>
</li>
</ol>
<h1 id="5-研发"><a href="#5-研发" class="headerlink" title="5.研发"></a>5.研发</h1><blockquote>
<p>主要应对电网数据采集与系统实施运维的业务需求</p>
</blockquote>
<h2 id="5-1-研发工具的业务内容"><a href="#5-1-研发工具的业务内容" class="headerlink" title="5.1.研发工具的业务内容"></a>5.1.研发工具的业务内容</h2><ol>
<li><p>地下电缆——数据采集</p>
<ol>
<li>地下电缆采集移动终端：GPS、物联网、RFID</li>
<li>地下电缆精益化管理工具</li>
</ol>
</li>
<li><p>营配贯通——PMS2.0运维</p>
<ol>
<li>营配贯通全方位辅助工具：变电站、公线、专线、共变、专变、配变到户</li>
<li>乡镇供电所图数治理工具</li>
</ol>
</li>
<li>GIS平台运维——系统建设<ol>
<li>基于国网GIS平台的车载GPS监控系统</li>
<li>GIS实用化管控工具</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是刚进公司，部门给新员工作的电力基础知识培训时自己作的笔记，算是在脑海里有了个框架，以后的要学的东西还很多！！！😊&lt;/p&gt;
    
    </summary>
    
    
      <category term="工作" scheme="https://GISering.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
</feed>
